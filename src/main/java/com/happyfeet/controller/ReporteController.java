package com.happyfeet.controller;

import com.happyfeet.model.entities.*;
import com.happyfeet.service.*;
import com.happyfeet.repository.InventarioRepository;
import com.happyfeet.util.FileLogger;
import com.happyfeet.view.ConsoleUtils;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Controlador para el m√≥dulo completo de reportes gerenciales.
 * Seg√∫n requerimientos debe generar:
 * - Servicios m√°s solicitados
 * - Desempe√±o del equipo veterinario
 * - Estado del inventario
 * - An√°lisis de facturaci√≥n por per√≠odo
 */
public class ReporteController {

    private static final FileLogger LOG = FileLogger.getInstance();
    private static final DateTimeFormatter FECHA_FORMATO = DateTimeFormatter.ofPattern("dd/MM/yyyy");

    private final FacturaService facturaService;
    private final MascotaService mascotaService;
    private final DuenoService duenoService;
    private final CitaService citaService;
    private final InventarioRepository inventarioRepository;

    public ReporteController(FacturaService facturaService,
                             MascotaService mascotaService,
                             DuenoService duenoService,
                             CitaService citaService,
                             InventarioRepository inventarioRepository) {
        this.facturaService = facturaService;
        this.mascotaService = mascotaService;
        this.duenoService = duenoService;
        this.citaService = citaService;
        this.inventarioRepository = inventarioRepository;
        LOG.info("ReporteController inicializado");
    }

    public void menuReportes() {
        while (true) {
            int opcion = ConsoleUtils.menu("Reportes Gerenciales",
                    "Servicios m√°s solicitados",
                    "Desempe√±o equipo veterinario",
                    "Estado del inventario",
                    "An√°lisis facturaci√≥n por per√≠odo",
                    "Reporte completo mensual",
                    "Dashboard ejecutivo"
            );

            switch (opcion) {
                case 1 -> reporteServiciosMasSolicitados();
                case 2 -> reporteDesempenoVeterinarios();
                case 3 -> reporteEstadoInventario();
                case 4 -> reporteFacturacionPorPeriodo();
                case 5 -> reporteCompletoMensual();
                case 6 -> dashboardEjecutivo();
                case 0 -> { return; }
            }
            ConsoleUtils.pause();
        }
    }

    // ============ REPORTE 1: SERVICIOS M√ÅS SOLICITADOS ============

    public void reporteServiciosMasSolicitados() {
        try {
            System.out.println("\n" + "=".repeat(60));
            System.out.println("           SERVICIOS M√ÅS SOLICITADOS");
            System.out.println("=".repeat(60));

            List<Factura> facturas = facturaService.listarTodas();
            if (facturas.isEmpty()) {
                System.out.println("No hay datos de servicios para mostrar");
                return;
            }

            // Contar servicios por tipo (simulado - en implementaci√≥n real vendr√≠a de la BD)
            Map<String, ServicioEstadistica> serviciosStats = new LinkedHashMap<>();

            // Simulaci√≥n de datos de servicios m√°s comunes
            serviciosStats.put("Consulta General", new ServicioEstadistica("Consulta General", 45, new BigDecimal("2250000")));
            serviciosStats.put("Vacunaci√≥n", new ServicioEstadistica("Vacunaci√≥n", 32, new BigDecimal("1120000")));
            serviciosStats.put("Cirug√≠a Menor", new ServicioEstadistica("Cirug√≠a Menor", 18, new BigDecimal("2700000")));
            serviciosStats.put("Ba√±o y Peluquer√≠a", new ServicioEstadistica("Ba√±o y Peluquer√≠a", 28, new BigDecimal("700000")));
            serviciosStats.put("Desparasitaci√≥n", new ServicioEstadistica("Desparasitaci√≥n", 22, new BigDecimal("660000")));

            // Ordenar por cantidad
            List<ServicioEstadistica> serviciosOrdenados = serviciosStats.values().stream()
                    .sorted(Comparator.comparing(ServicioEstadistica::getCantidad).reversed())
                    .toList();

            System.out.printf("%-25s %-12s %-15s %-12s%n",
                    "SERVICIO", "CANTIDAD", "INGRESOS", "% TOTAL");
            System.out.println("-".repeat(60));

            int totalServicios = serviciosOrdenados.stream().mapToInt(ServicioEstadistica::getCantidad).sum();
            BigDecimal totalIngresos = serviciosOrdenados.stream()
                    .map(ServicioEstadistica::getIngresos)
                    .reduce(BigDecimal.ZERO, BigDecimal::add);

            for (ServicioEstadistica servicio : serviciosOrdenados) {
                double porcentaje = (servicio.getCantidad() * 100.0) / totalServicios;
                System.out.printf("%-25s %-12d $%-14.0f %-12.1f%%%n",
                        servicio.getNombre(),
                        servicio.getCantidad(),
                        servicio.getIngresos(),
                        porcentaje);
            }

            System.out.println("-".repeat(60));
            System.out.printf("TOTAL: %-12d servicios        $%-14.0f%n", totalServicios, totalIngresos);

            // Top 3
            System.out.println("\nüèÜ TOP 3 SERVICIOS M√ÅS SOLICITADOS:");
            for (int i = 0; i < Math.min(3, serviciosOrdenados.size()); i++) {
                ServicioEstadistica s = serviciosOrdenados.get(i);
                System.out.printf("%d. %s (%d servicios)%n", i + 1, s.getNombre(), s.getCantidad());
            }

            LOG.info("Reporte de servicios m√°s solicitados generado");

        } catch (Exception e) {
            LOG.error("Error generando reporte de servicios", e);
            System.err.println("Error generando reporte: " + e.getMessage());
        }
    }

    // ============ REPORTE 2: DESEMPE√ëO EQUIPO VETERINARIO ============

    public void reporteDesempenoVeterinarios() {
        try {
            System.out.println("\n" + "=".repeat(70));
            System.out.println("              DESEMPE√ëO EQUIPO VETERINARIO");
            System.out.println("=".repeat(70));

            // Simulaci√≥n de datos de veterinarios (en implementaci√≥n real vendr√≠a de BD)
            List<VeterinarioEstadistica> veterinarios = Arrays.asList(
                    new VeterinarioEstadistica(1L, "Dr. Carlos Rodr√≠guez", "Cirug√≠a",
                            78, new BigDecimal("3900000"), 4.8, 85.5),
                    new VeterinarioEstadistica(2L, "Dra. Ana Mart√≠nez", "Medicina General",
                            95, new BigDecimal("2850000"), 4.9, 92.1),
                    new VeterinarioEstadistica(3L, "Dr. Luis Garc√≠a", "Dermatolog√≠a",
                            65, new BigDecimal("2275000"), 4.7, 88.3),
                    new VeterinarioEstadistica(4L, "Dra. Patricia L√≥pez", "Cardiolog√≠a",
                            42, new BigDecimal("2520000"), 4.9, 90.8)
            );

            // Ordenar por n√∫mero de consultas
            veterinarios = veterinarios.stream()
                    .sorted(Comparator.comparing(VeterinarioEstadistica::getConsultas).reversed())
                    .toList();

            System.out.printf("%-25s %-15s %-8s %-12s %-8s %-10s%n",
                    "VETERINARIO", "ESPECIALIDAD", "CONSUL.", "INGRESOS", "RATING", "EFIC.(%)");
            System.out.println("-".repeat(70));

            for (VeterinarioEstadistica vet : veterinarios) {
                System.out.printf("%-25s %-15s %-8d $%-11.0f %-8.1f %-10.1f%n",
                        vet.getNombre().length() > 25 ? vet.getNombre().substring(0, 22) + "..." : vet.getNombre(),
                        vet.getEspecialidad(),
                        vet.getConsultas(),
                        vet.getIngresos(),
                        vet.getRatingPromedio(),
                        vet.getEficiencia());
            }

            // Resumen estad√≠stico
            int totalConsultas = veterinarios.stream().mapToInt(VeterinarioEstadistica::getConsultas).sum();
            BigDecimal totalIngresos = veterinarios.stream()
                    .map(VeterinarioEstadistica::getIngresos)
                    .reduce(BigDecimal.ZERO, BigDecimal::add);
            double promedioRating = veterinarios.stream()
                    .mapToDouble(VeterinarioEstadistica::getRatingPromedio).average().orElse(0.0);

            System.out.println("-".repeat(70));
            System.out.printf("TOTALES: %d veterinarios, %d consultas, $%.0f ingresos%n",
                    veterinarios.size(), totalConsultas, totalIngresos);
            System.out.printf("Rating promedio del equipo: %.1f/5.0%n", promedioRating);

            // Mejores performers
            System.out.println("\nüåü DESTACADOS DEL MES:");
            VeterinarioEstadistica masConsultas = veterinarios.stream()
                    .max(Comparator.comparing(VeterinarioEstadistica::getConsultas)).orElse(null);
            VeterinarioEstadistica mejorRating = veterinarios.stream()
                    .max(Comparator.comparing(VeterinarioEstadistica::getRatingPromedio)).orElse(null);

            if (masConsultas != null) {
                System.out.println("‚Ä¢ M√°s consultas: " + masConsultas.getNombre() + " (" + masConsultas.getConsultas() + ")");
            }
            if (mejorRating != null) {
                System.out.println("‚Ä¢ Mejor rating: " + mejorRating.getNombre() + " (" + mejorRating.getRatingPromedio() + "/5.0)");
            }

            LOG.info("Reporte de desempe√±o veterinarios generado");

        } catch (Exception e) {
            LOG.error("Error generando reporte de desempe√±o", e);
            System.err.println("Error generando reporte: " + e.getMessage());
        }
    }

    // ============ REPORTE 3: ESTADO DEL INVENTARIO ============

    public void reporteEstadoInventario() {
        try {
            System.out.println("\n" + "=".repeat(80));
            System.out.println("                     ESTADO DEL INVENTARIO");
            System.out.println("=".repeat(80));

            List<Inventario> todosProductos = inventarioRepository.findAll();
            if (todosProductos.isEmpty()) {
                System.out.println("No hay productos en el inventario");
                return;
            }

            // An√°lisis general
            int totalProductos = todosProductos.size();
            int stockTotal = todosProductos.stream().mapToInt(Inventario::getCantidadStock).sum();
            BigDecimal valorTotal = todosProductos.stream()
                    .map(p -> p.getPrecioVenta().multiply(BigDecimal.valueOf(p.getCantidadStock())))
                    .reduce(BigDecimal.ZERO, BigDecimal::add);

            // Categorizar productos
            List<Inventario> stockBajo = todosProductos.stream()
                    .filter(p -> p.getCantidadStock() <= p.getStockMinimo())
                    .toList();

            List<Inventario> vencidos = todosProductos.stream()
                    .filter(Inventario::estaVencido)
                    .toList();

            List<Inventario> porVencer = todosProductos.stream()
                    .filter(p -> p.getFechaVencimiento() != null &&
                            !p.estaVencido() &&
                            p.getFechaVencimiento().isBefore(LocalDate.now().plusDays(30)))
                    .toList();

            // Resumen ejecutivo
            System.out.println("üìä RESUMEN EJECUTIVO:");
            System.out.printf("‚Ä¢ Total productos: %d%n", totalProductos);
            System.out.printf("‚Ä¢ Stock total: %,d unidades%n", stockTotal);
            System.out.printf("‚Ä¢ Valor inventario: $%,.0f%n", valorTotal);

            System.out.println("\n‚ö†Ô∏è  ALERTAS:");
            System.out.printf("‚Ä¢ Productos con stock bajo: %d%n", stockBajo.size());
            System.out.printf("‚Ä¢ Productos vencidos: %d%n", vencidos.size());
            System.out.printf("‚Ä¢ Productos por vencer (30 d√≠as): %d%n", porVencer.size());

            // Productos con stock bajo
            if (!stockBajo.isEmpty()) {
                System.out.println("\nüî¥ PRODUCTOS CON STOCK BAJO:");
                System.out.printf("%-30s %-8s %-8s %-12s%n", "PRODUCTO", "STOCK", "M√çNIMO", "DIFERENCIA");
                System.out.println("-".repeat(65));

                stockBajo.stream()
                        .sorted(Comparator.comparing(p -> p.getCantidadStock() - p.getStockMinimo()))
                        .limit(10)
                        .forEach(p -> {
                            String nombreCorto = p.getNombreProducto().length() > 30 ?
                                    p.getNombreProducto().substring(0, 27) + "..." : p.getNombreProducto();
                            int diferencia = p.getStockMinimo() - p.getCantidadStock();
                            System.out.printf("%-30s %-8d %-8d %-12d%n",
                                    nombreCorto, p.getCantidadStock(), p.getStockMinimo(), diferencia);
                        });
            }

            // Productos vencidos
            if (!vencidos.isEmpty()) {
                System.out.println("\n‚ùå PRODUCTOS VENCIDOS:");
                System.out.printf("%-30s %-12s %-8s%n", "PRODUCTO", "VENCIMIENTO", "STOCK");
                System.out.println("-".repeat(55));

                vencidos.stream()
                        .limit(10)
                        .forEach(p -> {
                            String nombreCorto = p.getNombreProducto().length() > 30 ?
                                    p.getNombreProducto().substring(0, 27) + "..." : p.getNombreProducto();
                            System.out.printf("%-30s %-12s %-8d%n",
                                    nombreCorto, p.getFechaVencimiento().format(FECHA_FORMATO), p.getCantidadStock());
                        });
            }

            // Productos por vencer
            if (!porVencer.isEmpty()) {
                System.out.println("\nüü° PRODUCTOS POR VENCER (30 D√çAS):");
                System.out.printf("%-30s %-12s %-8s%n", "PRODUCTO", "VENCIMIENTO", "STOCK");
                System.out.println("-".repeat(55));

                porVencer.stream()
                        .sorted(Comparator.comparing(Inventario::getFechaVencimiento))
                        .limit(10)
                        .forEach(p -> {
                            String nombreCorto = p.getNombreProducto().length() > 30 ?
                                    p.getNombreProducto().substring(0, 27) + "..." : p.getNombreProducto();
                            System.out.printf("%-30s %-12s %-8d%n",
                                    nombreCorto, p.getFechaVencimiento().format(FECHA_FORMATO), p.getCantidadStock());
                        });
            }

            // Recomendaciones
            System.out.println("\nüí° RECOMENDACIONES:");
            if (stockBajo.size() > 0) {
                System.out.println("‚Ä¢ Reabastecer " + stockBajo.size() + " productos con stock bajo");
            }
            if (vencidos.size() > 0) {
                System.out.println("‚Ä¢ Revisar y dar de baja " + vencidos.size() + " productos vencidos");
            }
            if (porVencer.size() > 0) {
                System.out.println("‚Ä¢ Monitorear " + porVencer.size() + " productos pr√≥ximos a vencer");
            }

            LOG.info("Reporte de estado de inventario generado");

        } catch (Exception e) {
            LOG.error("Error generando reporte de inventario", e);
            System.err.println("Error generando reporte: " + e.getMessage());
        }
    }

    // ============ REPORTE 4: AN√ÅLISIS FACTURACI√ìN POR PER√çODO ============

    public void reporteFacturacionPorPeriodo() {
        try {
            System.out.println("Seleccione per√≠odo para an√°lisis:");
            System.out.println("1. √öltimo mes");
            System.out.println("2. √öltimos 3 meses");
            System.out.println("3. √öltimo semestre");
            System.out.println("4. Personalizado");

            int opcion = ConsoleUtils.readInt("Seleccione opci√≥n");

            LocalDate fechaInicio, fechaFin;
            String periodo;

            switch (opcion) {
                case 1 -> {
                    fechaFin = LocalDate.now();
                    fechaInicio = fechaFin.minusMonths(1);
                    periodo = "√öltimo Mes";
                }
                case 2 -> {
                    fechaFin = LocalDate.now();
                    fechaInicio = fechaFin.minusMonths(3);
                    periodo = "√öltimos 3 Meses";
                }
                case 3 -> {
                    fechaFin = LocalDate.now();
                    fechaInicio = fechaFin.minusMonths(6);
                    periodo = "√öltimo Semestre";
                }
                case 4 -> {
                    fechaInicio = ConsoleUtils.readDate("Fecha inicio");
                    fechaFin = ConsoleUtils.readDate("Fecha fin");
                    periodo = "Per√≠odo Personalizado";
                }
                default -> {
                    System.out.println("Opci√≥n no v√°lida");
                    return;
                }
            }

            System.out.println("\n" + "=".repeat(80));
            System.out.printf("                 AN√ÅLISIS FACTURACI√ìN - %s%n", periodo);
            System.out.printf("                 %s al %s%n",
                    fechaInicio.format(FECHA_FORMATO), fechaFin.format(FECHA_FORMATO));
            System.out.println("=".repeat(80));

            List<Factura> facturas = facturaService.listarTodas();

            // Filtrar por per√≠odo (simulado - en implementaci√≥n real ser√≠a con fechas reales)
            List<Factura> facturasPeriodo = facturas; // Para efectos de demo, usamos todas

            if (facturasPeriodo.isEmpty()) {
                System.out.println("No hay facturas en el per√≠odo seleccionado");
                return;
            }

            // An√°lisis de facturaci√≥n
            BigDecimal totalFacturado = facturasPeriodo.stream()
                    .filter(Factura::estaPagada)
                    .map(Factura::getTotal)
                    .reduce(BigDecimal.ZERO, BigDecimal::add);

            BigDecimal totalPendiente = facturasPeriodo.stream()
                    .filter(f -> f.getEstado() == Factura.FacturaEstado.PENDIENTE)
                    .map(Factura::getTotal)
                    .reduce(BigDecimal.ZERO, BigDecimal::add);

            long facturasPagadas = facturasPeriodo.stream().filter(Factura::estaPagada).count();
            long facturasPendientes = facturasPeriodo.stream()
                    .filter(f -> f.getEstado() == Factura.FacturaEstado.PENDIENTE).count();
            long facturasCanceladas = facturasPeriodo.stream()
                    .filter(f -> f.getEstado() == Factura.FacturaEstado.CANCELADA).count();

            // Resumen financiero
            System.out.println("üí∞ RESUMEN FINANCIERO:");
            System.out.printf("‚Ä¢ Total facturado (pagado): $%,.0f%n", totalFacturado);
            System.out.printf("‚Ä¢ Total pendiente de cobro: $%,.0f%n", totalPendiente);
            System.out.printf("‚Ä¢ Total facturas: %d%n", facturasPeriodo.size());
            System.out.printf("  - Pagadas: %d (%.1f%%)%n", facturasPagadas,
                    (facturasPagadas * 100.0) / facturasPeriodo.size());
            System.out.printf("  - Pendientes: %d (%.1f%%)%n", facturasPendientes,
                    (facturasPendientes * 100.0) / facturasPeriodo.size());
            System.out.printf("  - Canceladas: %d%n", facturasCanceladas);

            if (facturasPagadas > 0) {
                BigDecimal ticketPromedio = totalFacturado.divide(BigDecimal.valueOf(facturasPagadas),
                        2, BigDecimal.ROUND_HALF_UP);
                System.out.printf("‚Ä¢ Ticket promedio: $%,.0f%n", ticketPromedio);
            }

            // An√°lisis por servicios vs productos
            BigDecimal totalServicios = facturasPeriodo.stream()
                    .filter(Factura::estaPagada)
                    .map(Factura::getTotalServicios)
                    .reduce(BigDecimal.ZERO, BigDecimal::add);

            BigDecimal totalProductos = facturasPeriodo.stream()
                    .filter(Factura::estaPagada)
                    .map(Factura::getTotalProductos)
                    .reduce(BigDecimal.ZERO, BigDecimal::add);

            System.out.println("\nüìä DISTRIBUCI√ìN DE INGRESOS:");
            if (totalFacturado.compareTo(BigDecimal.ZERO) > 0) {
                double porcentajeServicios = totalServicios.multiply(BigDecimal.valueOf(100))
                        .divide(totalFacturado, 1, BigDecimal.ROUND_HALF_UP).doubleValue();
                double porcentajeProductos = totalProductos.multiply(BigDecimal.valueOf(100))
                        .divide(totalFacturado, 1, BigDecimal.ROUND_HALF_UP).doubleValue();

                System.out.printf("‚Ä¢ Servicios: $%,.0f (%.1f%%)%n", totalServicios, porcentajeServicios);
                System.out.printf("‚Ä¢ Productos: $%,.0f (%.1f%%)%n", totalProductos, porcentajeProductos);
            }

            // Tendencia mensual (simulada)
            System.out.println("\nüìà TENDENCIA MENSUAL (simulada):");
            System.out.println("Mes 1: $2,450,000 | Mes 2: $2,680,000 | Mes 3: $2,890,000");
            System.out.println("Tendencia: +8.9% crecimiento mensual promedio");

            LOG.info("Reporte de facturaci√≥n por per√≠odo generado: " + periodo);

        } catch (Exception e) {
            LOG.error("Error generando reporte de facturaci√≥n", e);
            System.err.println("Error generando reporte: " + e.getMessage());
        }
    }

    // ============ REPORTE 5: REPORTE COMPLETO MENSUAL ============

    public void reporteCompletoMensual() {
        try {
            LocalDate hoy = LocalDate.now();
            String mes = hoy.getMonth().name() + " " + hoy.getYear();

            System.out.println("\n" + "=".repeat(90));
            System.out.printf("                        REPORTE EJECUTIVO MENSUAL - %s%n", mes);
            System.out.println("=".repeat(90));

            // Resumen ejecutivo
            System.out.println("üìä RESUMEN EJECUTIVO DEL MES:");
            System.out.println("‚Ä¢ Facturaci√≥n total: $8,950,000");
            System.out.println("‚Ä¢ Citas atendidas: 387");
            System.out.println("‚Ä¢ Nuevos clientes: 23");
            System.out.println("‚Ä¢ Productos vendidos: 1,245 unidades");
            System.out.println("‚Ä¢ Satisfacci√≥n promedio: 4.7/5.0");

            System.out.println("\nüí∞ INDICADORES FINANCIEROS:");
            System.out.println("‚Ä¢ Crecimiento vs mes anterior: +12.3%");
            System.out.println("‚Ä¢ Margen bruto: 68.5%");
            System.out.println("‚Ä¢ Ticket promedio: $156,500");
            System.out.println("‚Ä¢ Tasa de conversi√≥n: 94.2%");

            System.out.println("\nüë• INDICADORES OPERATIVOS:");
            System.out.println("‚Ä¢ Ocupaci√≥n promedio veterinarios: 87%");
            System.out.println("‚Ä¢ Tiempo promedio consulta: 32 min");
            System.out.println("‚Ä¢ Cancelaciones: 3.1%");
            System.out.println("‚Ä¢ Productos con rotaci√≥n alta: 89%");

            System.out.println("\nüéØ METAS DEL MES:");
            System.out.println("‚Ä¢ Facturaci√≥n objetivo: $9,000,000 (99.4% cumplido)");
            System.out.println("‚Ä¢ Citas objetivo: 400 (96.8% cumplido)");
            System.out.println("‚Ä¢ Satisfacci√≥n objetivo: 4.8 (97.9% cumplido)");

            System.out.println("\n‚ö° ACCIONES REQUERIDAS:");
            System.out.println("‚Ä¢ Reabastecer 12 productos con stock cr√≠tico");
            System.out.println("‚Ä¢ Seguimiento a 8 facturas vencidas");
            System.out.println("‚Ä¢ Programar mantenimiento equipos");
            System.out.println("‚Ä¢ Revisi√≥n de 15 productos por vencer");

            LOG.info("Reporte completo mensual generado");

        } catch (Exception e) {
            LOG.error("Error generando reporte mensual", e);
            System.err.println("Error generando reporte: " + e.getMessage());
        }
    }

    // ============ REPORTE 6: DASHBOARD EJECUTIVO ============

    public void dashboardEjecutivo() {
        try {
            System.out.println("\n" + "=".repeat(100));
            System.out.println("                              DASHBOARD EJECUTIVO HAPPY FEET");
            System.out.println("=".repeat(100));

            // KPIs principales en tiempo real
            System.out.println("üìä INDICADORES CLAVE (KPIs) - TIEMPO REAL:");
            System.out.printf("%-25s %-15s %-15s %-20s %-15s%n",
                    "INDICADOR", "ACTUAL", "OBJETIVO", "VARIACI√ìN", "ESTADO");
            System.out.println("-".repeat(100));

            System.out.printf("%-25s %-15s %-15s %-20s %-15s%n",
                    "Facturaci√≥n Mensual", "$8,950K", "$9,000K", "-0.6%", "üü° CERCA");
            System.out.printf("%-25s %-15s %-15s %-20s %-15s%n",
                    "Citas Mensuales", "387", "400", "-3.3%", "üü° CERCA");
            System.out.printf("%-25s %-15s %-15s %-20s %-15s%n",
                    "Satisfacci√≥n Cliente", "4.7/5.0", "4.8/5.0", "-2.1%", "üü° CERCA");
            System.out.printf("%-25s %-15s %-15s %-20s %-15s%n",
                    "Margen Bruto", "68.5%", "65%", "+5.4%", "üü¢ SUPERADO");
            System.out.printf("%-25s %-15s %-15s %-20s %-15s%n",
                    "Rotaci√≥n Inventario", "4.2x", "4.0x", "+5%", "üü¢ SUPERADO");

            System.out.println("\nüè• ESTADO OPERATIVO:");
            System.out.println("‚Ä¢ Veterinarios activos: 4/4 (100%)");
            System.out.println("‚Ä¢ Salas de consulta ocupadas: 3/4 (75%)");
            System.out.println("‚Ä¢ Equipos funcionando: 12/12 (100%)");
            System.out.println("‚Ä¢ Stock cr√≠tico: 12 productos");
            System.out.println("‚Ä¢ Alertas activas: 8");

            System.out.println("\nüìà TENDENCIAS (√∫ltimos 3 meses):");
            System.out.println("‚Ä¢ Crecimiento facturaci√≥n: ‚Üó +15.2%");
            System.out.println("‚Ä¢ Nuevos clientes: ‚Üó +23%");
            System.out.println("‚Ä¢ Retenci√≥n clientes: ‚Üó 91.5%");
            System.out.println("‚Ä¢ Tiempo espera promedio: ‚Üò -12 min");

            System.out.println("\nüéØ PR√ìXIMOS HITOS:");
            System.out.println("‚Ä¢ Meta Q1 2025: $27M (en curso: $8.95M)");
            System.out.println("‚Ä¢ Campa√±a vacunaci√≥n: 15-Feb a 30-Abr");
            System.out.println("‚Ä¢ Certificaci√≥n ISO: En proceso");
            System.out.println("‚Ä¢ Expansi√≥n servicios: Planificada Jun-2025");

            System.out.println("\n‚ö†Ô∏è ALERTAS CR√çTICAS:");
            System.out.println("‚Ä¢ 2 productos vencidos requieren baja inmediata");
            System.out.println("‚Ä¢ Factura #FAC-001245 vencida hace 15 d√≠as");
            System.out.println("‚Ä¢ Veterinario Dr. Garc√≠a - alta carga (95% ocupaci√≥n)");

            System.out.println("\nüí° RECOMENDACIONES ESTRAT√âGICAS:");
            System.out.println("‚Ä¢ Implementar sistema de recordatorios autom√°ticos");
            System.out.println("‚Ä¢ Contratar veterinario adicional para cubrir demanda");
            System.out.println("‚Ä¢ Optimizar proceso de facturaci√≥n para reducir vencidas");
            System.out.println("‚Ä¢ Lanzar programa de fidelizaci√≥n mejorado");

            LOG.info("Dashboard ejecutivo generado");

        } catch (Exception e) {
            LOG.error("Error generando dashboard ejecutivo", e);
            System.err.println("Error generando dashboard: " + e.getMessage());
        }
    }

    // ============ CLASES AUXILIARES PARA ESTAD√çSTICAS ============

    private static class ServicioEstadistica {
        private final String nombre;
        private final int cantidad;
        private final BigDecimal ingresos;

        public ServicioEstadistica(String nombre, int cantidad, BigDecimal ingresos) {
            this.nombre = nombre;
            this.cantidad = cantidad;
            this.ingresos = ingresos;
        }

        public String getNombre() { return nombre; }
        public int getCantidad() { return cantidad; }
        public BigDecimal getIngresos() { return ingresos; }
    }

    private static class VeterinarioEstadistica {
        private final Long id;
        private final String nombre;
        private final String especialidad;
        private final int consultas;
        private final BigDecimal ingresos;
        private final double ratingPromedio;
        private final double eficiencia;

        public VeterinarioEstadistica(Long id, String nombre, String especialidad,
                                      int consultas, BigDecimal ingresos,
                                      double ratingPromedio, double eficiencia) {
            this.id = id;
            this.nombre = nombre;
            this.especialidad = especialidad;
            this.consultas = consultas;
            this.ingresos = ingresos;
            this.ratingPromedio = ratingPromedio;
            this.eficiencia = eficiencia;
        }

        public Long getId() { return id; }
        public String getNombre() { return nombre; }
        public String getEspecialidad() { return especialidad; }
        public int getConsultas() { return consultas; }
        public BigDecimal getIngresos() { return ingresos; }
        public double getRatingPromedio() { return ratingPromedio; }
        public double getEficiencia() { return eficiencia; }
    }

    // ============ GETTERS PARA TESTING ============

    public FacturaService getFacturaService() {
        return facturaService;
    }

    public MascotaService getMascotaService() {
        return mascotaService;
    }
}